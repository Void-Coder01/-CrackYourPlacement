//It's a simple simulation problem
public void gameOfLife(int[][] board) {
        int temp[][] = new int[board.length][board[0].length];

        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
               int neighbour = findNeighbour(board,temp,i,j);
               //dead by less
               if(board[i][j] == 1 && neighbour < 2){
                temp[i][j] = 0;
               }
               //alive
               else if((board[i][j] == 1 && (neighbour == 2 || neighbour == 3)) || (board[i][j] == 0 && neighbour == 3)){
                temp[i][j] = 1;
               }
               //dead by more
               else if (board[i][j] == 1 && neighbour > 3){
                temp[i][j] = 0;
               }
                
            }
        }

        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                board[i][j] = temp[i][j];
            }
        }
    }

    public  int findNeighbour(int arr[][], int temp[][], int i,int j){
        int lives = 0;
        int n=arr.length;
        int m = arr[0].length;

        //diagonal checks

        if((i-1) >= 0 && (j-1)>= 0){
            lives += (arr[i-1][j-1] == 1)?1:0;
        }

        if((i+1) < n && (j+1) < m){
            lives += (arr[i+1][j+1] == 1)?1:0;
        }

        if((i-1) >= 0 && (j+1) < m){
            lives += (arr[i-1][j+1] == 1)?1:0;
        }

        if((i+1) < n && (j-1) >= 0){
            lives += (arr[i+1][j-1] == 1)?1:0;
        }

        //left and right 
        if((j-1) >= 0){
            lives += (arr[i][j-1] == 1)?1:0;
        }

        if((j+1) < m){
            lives += (arr[i][j+1] == 1)?1:0;
        }

        //up and down
        if(i-1 >= 0 ){
            lives += (arr[i-1][j] == 1)?1:0;
        }

        if(i+1 < n){
            lives += (arr[i+1][j] == 1)?1:0;
        }

        return lives;
    }
