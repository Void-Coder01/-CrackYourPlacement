//using logic of merge sort 
//before merging step we check if ele of left arr can make a pair with ele of right arr
class Solution {
    
    public int reversePairs(int[] nums) {
       
        return  mergeSort(nums,0,nums.length-1); 
    }

    public int mergeSort(int nums[] , int low , int high){
        int cnt = 0;
        if(low >= high){
            return cnt;
        }
        int mid = low + (high - low)/2;
        cnt += mergeSort(nums,low,mid);
        cnt += mergeSort(nums,mid+1,high);

        cnt += countPairs(nums,low,mid,high);

        merge(nums,low,mid,high);
        return cnt;
    }

    public int countPairs(int nums[], int low, int mid, int high){
        int right = mid+1;
        int cnt = 0;
        for(int i=low;i<=mid;i++){
            while(right <= high && nums[i]>(2L*nums[right])){
                right ++;
            }

            cnt += right - (mid+1);
        }
        return cnt;
    }


    public void merge(int nums[], int low , int mid, int high){
        int temp[] = new int[high-low+1];
        int i=low;
        int j= mid+1;
        int k=0;

        while(i<=mid && j<=high){
            if(nums[i] < nums[j]){
                temp[k++] = nums[i++];
            }else{
                temp[k++] = nums[j++];
            }
        }


        while(i<=mid){
            temp[k++] = nums[i++];
        }

        while(j<=high){
            temp[k++] = nums[j++];
        }

        for(i=low,k=0;k<temp.length;i++,k++){
            nums[i] = temp[k];
        }
    }
}
