//using backtracking
class Solution {

   private List<String> ans = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        int open = 0;
        int close =0;
        solve(new StringBuilder(""), n,open, close);

        return ans;
    }

    public void solve(StringBuilder sb, int n, int open, int close){
        if(sb.length() == 2*n){
            ans.add(sb.toString());
             return;
        }

        if(open < n){
            sb.append("(");
            solve(sb,n,open+1,close);
            sb.deleteCharAt(sb.length()-1);
        }

        if(close < open){
            sb.append(")");
            solve(sb,n,open, close+1);
            sb.deleteCharAt(sb.length()-1);
        }
    }   
}

//optimizing - Noticing the fact that open bracket shoudl be half of the 2*length of the string i.e n then only our combination of string is valid also 
//if close bracket count becomes greater than close count it means we have added extra close bracket - A VALID PAENTHESES SHOULD HAVE EQUAL CLOSE AND OPEN
BRACKET. Implementing this idea to the code 

class Solution {

   private List<String> ans = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        int open = 0;
        int close =0;
        solve(new StringBuilder(""), n,open, close);

        return ans;
    }

    public void solve(StringBuilder sb, int n, int open, int close){
        if(sb.length() == 2*n){
            ans.add(sb.toString());
             return;
        }

        if(open < n){
            sb.append("(");
            solve(sb,n,open+1,close);
            sb.deleteCharAt(sb.length()-1);
        }

        if(close < open){
            sb.append(")");
            solve(sb,n,open, close+1);
            sb.deleteCharAt(sb.length()-1);
        }
    }  
}
